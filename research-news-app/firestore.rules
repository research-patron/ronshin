rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    function isValidMembership() {
      return isAuthenticated() && 
        exists(/databases/$(database)/documents/users/$(request.auth.uid));
    }
    
    
    // Users collection
    match /users/{userId} {
      allow read: if isAuthenticated();
      allow create: if isOwner(userId);
      allow update: if isOwner(userId) && 
        (!request.resource.data.diff(resource.data).affectedKeys().hasAny(['uid', 'email']));
      allow delete: if false;
    }
    
    // Papers collection
    match /papers/{paperId} {
      allow read: if isAuthenticated() && (
        resource == null || // Allow read during creation
        resource.data.uploaderId == request.auth.uid || 
        resource.data.isPublic == true
      );
      allow create: if isAuthenticated() && 
        request.resource.data.uploaderId == request.auth.uid;
      allow update: if isAuthenticated() && (
        resource.data.uploaderId == request.auth.uid ||
        // Allow update if the paper is being processed (for Cloud Functions)
        request.resource.data.processingStatus != null
      );
      allow delete: if isOwner(resource.data.uploaderId);
    }
    
    // Newspapers collection
    match /newspapers/{newspaperId} {
      allow read: if resource.data.isPublic == true || 
        (isAuthenticated() && resource.data.creatorId == request.auth.uid) ||
        (isAuthenticated() && request.auth.uid in resource.data.shareSettings.allowedUsers);
      allow create: if isValidMembership();
      allow update: if isOwner(resource.data.creatorId);
      allow delete: if isOwner(resource.data.creatorId);
    }
    
    // Groups collection
    match /groups/{groupId} {
      allow read: if isAuthenticated() && 
        request.auth.uid in resource.data.members;
      allow create: if isAuthenticated();
      allow update: if isAuthenticated() && 
        (resource.data.creatorId == request.auth.uid || 
         request.auth.uid in resource.data.admins);
      allow delete: if isOwner(resource.data.creatorId);
    }
    
    // Templates collection (read-only for users)
    match /templates/{templateId} {
      allow read: if true;
      allow write: if false;
    }
    
    // Payments collection
    match /payments/{paymentId} {
      allow read: if isOwner(resource.data.userId);
      allow write: if false; // Only server-side writes
    }
    
    // System settings (read-only for all)
    match /systemSettings/{settingId} {
      allow read: if true;
      allow write: if false;
    }
  }
}